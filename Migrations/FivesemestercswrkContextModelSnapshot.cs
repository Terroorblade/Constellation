// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using КурсоваяБД5.Models;

#nullable disable

namespace КурсоваяБД5.Migrations
{
    [DbContext(typeof(FivesemestercswrkContext))]
    partial class FivesemestercswrkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("КурсоваяБД5.Models.DailySchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateOnly>("ScheduleData")
                        .HasColumnType("date")
                        .HasColumnName("schedule_data");

                    b.Property<int?>("UserSchedule")
                        .HasColumnType("integer")
                        .HasColumnName("user_schedule");

                    b.HasKey("ScheduleId")
                        .HasName("daily_schedule_pkey");

                    b.HasIndex("UserSchedule");

                    b.ToTable("daily_schedule", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<int?>("EventSchedule")
                        .HasColumnType("integer")
                        .HasColumnName("event_schedule");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("priority")
                        .HasDefaultValueSql("'low'::character varying");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("EventId")
                        .HasName("event_pkey");

                    b.HasIndex("EventSchedule");

                    b.ToTable("event", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalId"));

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int?>("GoalSphere")
                        .HasColumnType("integer")
                        .HasColumnName("goal_sphere");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("GoalId")
                        .HasName("goal_pkey");

                    b.HasIndex("GoalSphere");

                    b.ToTable("goal", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Habit", b =>
                {
                    b.Property<int>("HabitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("habit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HabitId"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Frequency")
                        .HasColumnType("interval")
                        .HasColumnName("frequency");

                    b.Property<int?>("GoalHabit")
                        .HasColumnType("integer")
                        .HasColumnName("goal_habit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reminder");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("HabitId")
                        .HasName("habit_pkey");

                    b.HasIndex("GoalHabit");

                    b.ToTable("habit", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.HabitOfTheDay", b =>
                {
                    b.Property<int>("HabitDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("habit_day_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HabitDayId"));

                    b.Property<int?>("HabitDay")
                        .HasColumnType("integer")
                        .HasColumnName("habit_day");

                    b.Property<int?>("ScheduleDay")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_day");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("HabitDayId")
                        .HasName("habit_of_the_day_pkey");

                    b.HasIndex("HabitDay");

                    b.HasIndex("ScheduleDay");

                    b.ToTable("habit_of_the_day", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.SpheresOfLife", b =>
                {
                    b.Property<int>("SphereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sphere_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SphereId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("SphereId")
                        .HasName("spheres_of_life_pkey");

                    b.ToTable("spheres_of_life", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.UserSphereSatisfaction", b =>
                {
                    b.Property<int>("SatisfactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("satisfaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SatisfactionId"));

                    b.Property<short?>("SatisfactionLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("satisfaction_level");

                    b.Property<int?>("SphereIds")
                        .HasColumnType("integer")
                        .HasColumnName("sphere_ids");

                    b.Property<int?>("UserSpheres")
                        .HasColumnType("integer")
                        .HasColumnName("user_spheres");

                    b.HasKey("SatisfactionId")
                        .HasName("user_sphere_satisfaction_pkey");

                    b.HasIndex("SphereIds");

                    b.HasIndex("UserSpheres");

                    b.ToTable("user_sphere_satisfaction", "fivesembd");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.DailySchedule", b =>
                {
                    b.HasOne("КурсоваяБД5.Models.User", "UserScheduleNavigation")
                        .WithMany("DailySchedules")
                        .HasForeignKey("UserSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("daily_schedule_user_schedule_fkey");

                    b.Navigation("UserScheduleNavigation");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Event", b =>
                {
                    b.HasOne("КурсоваяБД5.Models.DailySchedule", "EventScheduleNavigation")
                        .WithMany("Events")
                        .HasForeignKey("EventSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("event_event_schedule_fkey");

                    b.Navigation("EventScheduleNavigation");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Goal", b =>
                {
                    b.HasOne("КурсоваяБД5.Models.SpheresOfLife", "GoalSphereNavigation")
                        .WithMany("Goals")
                        .HasForeignKey("GoalSphere")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("goal_goal_sphere_fkey");

                    b.Navigation("GoalSphereNavigation");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Habit", b =>
                {
                    b.HasOne("КурсоваяБД5.Models.Goal", "GoalHabitNavigation")
                        .WithMany("Habits")
                        .HasForeignKey("GoalHabit")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("habit_goal_habit_fkey");

                    b.Navigation("GoalHabitNavigation");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.HabitOfTheDay", b =>
                {
                    b.HasOne("КурсоваяБД5.Models.Habit", "HabitDayNavigation")
                        .WithMany("HabitOfTheDays")
                        .HasForeignKey("HabitDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("habit_of_the_day_habit_day_fkey");

                    b.HasOne("КурсоваяБД5.Models.DailySchedule", "ScheduleDayNavigation")
                        .WithMany("HabitOfTheDays")
                        .HasForeignKey("ScheduleDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("habit_of_the_day_schedule_day_fkey");

                    b.Navigation("HabitDayNavigation");

                    b.Navigation("ScheduleDayNavigation");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.UserSphereSatisfaction", b =>
                {
                    b.HasOne("КурсоваяБД5.Models.SpheresOfLife", "SphereIdsNavigation")
                        .WithMany("UserSphereSatisfactions")
                        .HasForeignKey("SphereIds")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("user_sphere_satisfaction_sphere_ids_fkey");

                    b.HasOne("КурсоваяБД5.Models.User", "UserSpheresNavigation")
                        .WithMany("UserSphereSatisfactions")
                        .HasForeignKey("UserSpheres")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("user_sphere_satisfaction_user_spheres_fkey");

                    b.Navigation("SphereIdsNavigation");

                    b.Navigation("UserSpheresNavigation");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.DailySchedule", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("HabitOfTheDays");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Goal", b =>
                {
                    b.Navigation("Habits");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.Habit", b =>
                {
                    b.Navigation("HabitOfTheDays");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.SpheresOfLife", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("UserSphereSatisfactions");
                });

            modelBuilder.Entity("КурсоваяБД5.Models.User", b =>
                {
                    b.Navigation("DailySchedules");

                    b.Navigation("UserSphereSatisfactions");
                });
#pragma warning restore 612, 618
        }
    }
}
